namespace lc0036 {
  const board = [
    ["5", "3", ".", ".", "7", ".", ".", ".", "."],
    ["6", ".", ".", "1", "9", "5", ".", ".", "."],
    [".", "9", "8", ".", ".", ".", ".", "6", "."],
    ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
    ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
    ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
    [".", "6", ".", ".", ".", ".", "2", "8", "."],
    [".", ".", ".", "4", "1", "9", ".", ".", "5"],
    [".", ".", ".", ".", "8", ".", ".", "7", "9"],
  ];
  const board2 = [
    ["8", "3", ".", ".", "7", ".", ".", ".", "."],
    ["6", ".", ".", "1", "9", "5", ".", ".", "."],
    [".", "9", "8", ".", ".", ".", ".", "6", "."],
    ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
    ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
    ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
    [".", "6", ".", ".", ".", ".", "2", "8", "."],
    [".", ".", ".", "4", "1", "9", ".", ".", "5"],
    [".", ".", ".", ".", "8", ".", ".", "7", "9"],
  ];
  const board3 = [
    [".", ".", ".", ".", "5", ".", ".", "1", "."],
    [".", "4", ".", "3", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", "3", ".", ".", "1"],
    ["8", ".", ".", ".", ".", ".", ".", "2", "."],
    [".", ".", "2", ".", "7", ".", ".", ".", "."],
    [".", "1", "5", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", "2", ".", ".", "."],
    [".", "2", ".", "9", ".", ".", ".", ".", "."],
    [".", ".", "4", ".", ".", ".", ".", ".", "."],
  ];

  const gen = (n: number) => new Array(n).fill(0);
  const jpjs = (obj: any) => JSON.parse(JSON.stringify(obj));
  function isValidSudoku(board: string[][]): boolean {
    // valid1 9x9
    const rows = jpjs(gen(9).fill(gen(9)));
    // valid2 9x9
    const cols = jpjs(gen(9).fill(gen(9)));
    // valid3 3x3x9
    const boxes = jpjs(gen(3).fill(gen(3).fill(gen(9))));
    for (let i = 0; i < 9; i++) {
      for (let j = 0; j < 9; j++) {
        const curr = board[i][j];
        if (curr === ".") continue;
        const idx = Number(curr) - 1;
        rows[i][idx] += 1;
        cols[j][idx] += 1;
        boxes[(i / 3) | 0][(j / 3) | 0][idx] += 1;
        const isPass = () => {
          if (rows[i][idx] > 1) return false;
          if (cols[j][idx] > 1) return false;
          if (boxes[(i / 3) | 0][(j / 3) | 0][idx] > 1) return false;
          return true;
        };
        if (!isPass()) return false;
      }
    }
    return true;
  }
  const asl = isValidSudoku(board3);
  console.log(asl);
}
